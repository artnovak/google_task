land = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],

]

def find_land(land) -> int:
    """Принимает матрицу, и ищет граничущие друг с другом единицы.
    возращает колличество групп, таких единиций, которые есть в матрице"""
    def zeroing(land, x, y):
        """Исполняется при условии нахождении группы, Зануление группы в матрице"""
        coords = [[y, x]]
        while len(coords) != 0: # проверка границ, при наличии границы, добавляет в список coords её координаты
            land[coords[0][0]][coords[0][1]] = 0
            if land[coords[0][0]+1][coords[0][1]] == 1:
                coords.append([coords[0][0] + 1, coords[0][1]])
            if land[coords[0][0] - 1][coords[0][1]] == 1:
                coords.append([coords[0][0] - 1, coords[0][1]])
            if land[coords[0][0]][coords[0][1] + 1] == 1:
                coords.append([coords[0][0], coords[0][1] + 1])
            if land[coords[0][0]][coords[0][1] - 1] == 1:
                coords.append([coords[0][0], coords[0][1] - 1])
            coords.pop(0) # убираем первый эелемент из списка, т.к. он уже занулен.

    def isolate(land):
        """Нахождение граничущих друг с другом единиц. возращает колличество данных групп"""
        count = 0
        for i in range(len(land)):
            for j in range(len(land[0])): # проходим по каждому элементу матрицы
                if land[i][j] == 1:
                    count += 1
                    zeroing(land, j, i)
        return count
    return isolate(land)

print(find_land(land))


